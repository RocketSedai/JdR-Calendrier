const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

// V√©rification des variables d'environnement
if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  console.error('SUPABASE_URL et SUPABASE_ANON_KEY doivent √™tre d√©finies');
  process.exit(1);
}

// Cr√©ation du client Supabase
const supabase = createClient(supabaseUrl, supabaseKey);

// Fonction de test de connexion
async function testConnection() {
  try {
    console.log('üîç Test de connexion Supabase...');
    console.log('URL:', supabaseUrl);
    console.log('Cl√© (premiers caract√®res):', supabaseKey ? supabaseKey.substring(0, 20) + '...' : 'Non d√©finie');
    
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erreur de connexion Supabase:', error);
      return false;
    }
    
    console.log('‚úÖ Connexion Supabase r√©ussie');
    
    // Tentative de migration automatique
    await migrateUsersToRoleSystem();
    
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du test de connexion:', error);
    return false;
  }
}

// Migration automatique des utilisateurs vers le syst√®me de r√¥les
async function migrateUsersToRoleSystem() {
  try {
    console.log('üîÑ V√©rification de la migration vers le syst√®me de r√¥les...');
    
    // V√©rifier si la colonne role existe
    const { data: users, error } = await supabase
      .from('users')
      .select('*')
      .limit(1);
    
    if (error) {
      console.log('‚ÑπÔ∏è Migration impossible, table users non accessible');
      return;
    }
    
    // Si des utilisateurs existent et n'ont pas de role mais ont is_admin
    if (users && users.length > 0 && users[0].hasOwnProperty('is_admin') && !users[0].hasOwnProperty('role')) {
      console.log('üîÑ Migration n√©cessaire - ajout de la colonne role');
      
      // Cette migration sera g√©r√©e c√¥t√© base de donn√©es
      // L'application continuera √† fonctionner avec la logique de fallback
    }
    
    console.log('‚úÖ Syst√®me de r√¥les v√©rifi√©');
  } catch (error) {
    console.log('‚ÑπÔ∏è V√©rification migration ignor√©e:', error.message);
  }
}

// Fonctions pour g√©rer les utilisateurs
async function getUsers() {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .order('created_at', { ascending: true });
    
    if (error) {
      console.error('Erreur lors de la r√©cup√©ration des utilisateurs:', error);
      return [];
    }
    
    // Transformer les donn√©es de Supabase vers le format de l'application
    const users = (data || []).map(user => ({
      email: user.email,
      displayName: user.display_name, // Conversion du snake_case vers camelCase
      // Migration automatique : si role n'existe pas, utiliser is_admin
      role: user.role || (user.is_admin ? 'admin' : 'user')
    }));
    
    console.log('Utilisateurs r√©cup√©r√©s:', users);
    return users;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des utilisateurs:', error);
    return [];
  }
}

async function saveUsers(users) {
  try {
    console.log('Sauvegarde des utilisateurs:', users);
    
    // Supprimer tous les utilisateurs existants
    const { error: deleteError } = await supabase
      .from('users')
      .delete()
      .neq('id', 0); // Supprime tous les enregistrements
    
    if (deleteError) {
      console.error('Erreur lors de la suppression des utilisateurs:', deleteError);
      return false;
    }
    
    // Ins√©rer les nouveaux utilisateurs
    if (users.length > 0) {
      // Transformer les donn√©es pour correspondre au sch√©ma Supabase
      const usersToInsert = users.map(user => ({
        email: user.email,
        display_name: user.displayName, // Notez le underscore
        role: user.role || 'user' // Nouveau syst√®me de r√¥les
      }));
      
      console.log('Donn√©es √† ins√©rer:', usersToInsert);
      
      const { data, error: insertError } = await supabase
        .from('users')
        .insert(usersToInsert)
        .select();
      
      if (insertError) {
        console.error('Erreur lors de l\'insertion des utilisateurs:', insertError);
        return false;
      }
      
      console.log('Utilisateurs ins√©r√©s avec succ√®s:', data);
    }
    
    return true;
  } catch (error) {
    console.error('Erreur lors de la sauvegarde des utilisateurs:', error);
    return false;
  }
}

// Fonctions pour g√©rer les disponibilit√©s
async function getAvailabilities() {
  try {
    const { data, error } = await supabase
      .from('availabilities')
      .select('*');
    
    if (error) {
      console.error('Erreur lors de la r√©cup√©ration des disponibilit√©s:', error);
      return {};
    }
    
    // Convertir les donn√©es en format attendu par l'application
    const availabilities = {};
    data.forEach(item => {
      const key = `${item.user_email}_${item.year}_${item.month}`;
      availabilities[key] = item.availability_data;
    });
    
    return availabilities;
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des disponibilit√©s:', error);
    return {};
  }
}

async function saveAvailabilities(availabilities) {
  try {
    // Supprimer toutes les disponibilit√©s existantes
    const { error: deleteError } = await supabase
      .from('availabilities')
      .delete()
      .neq('id', 0);
    
    if (deleteError) {
      console.error('Erreur lors de la suppression des disponibilit√©s:', deleteError);
      return false;
    }
    
    // Pr√©parer les donn√©es pour l'insertion
    const availabilityRecords = [];
    Object.entries(availabilities).forEach(([key, availabilityData]) => {
      const [userEmail, year, month] = key.split('_');
      availabilityRecords.push({
        user_email: userEmail,
        year: parseInt(year),
        month: parseInt(month),
        availability_data: availabilityData
      });
    });
    
    // Ins√©rer les nouvelles disponibilit√©s
    if (availabilityRecords.length > 0) {
      const { error: insertError } = await supabase
        .from('availabilities')
        .insert(availabilityRecords);
      
      if (insertError) {
        console.error('Erreur lors de l\'insertion des disponibilit√©s:', insertError);
        return false;
      }
    }
    
    return true;
  } catch (error) {
    console.error('Erreur lors de la sauvegarde des disponibilit√©s:', error);
    return false;
  }
}

// Fonction pour r√©cup√©rer toutes les donn√©es
async function getAllData() {
  try {
    const [users, availabilities] = await Promise.all([
      getUsers(),
      getAvailabilities()
    ]);
    
    return {
      users,
      availabilities
    };
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des donn√©es:', error);
    return {
      users: [],
      availabilities: {}
    };
  }
}

// Fonction pour sauvegarder toutes les donn√©es
async function saveAllData(users, availabilities) {
  try {
    const [usersResult, availabilitiesResult] = await Promise.all([
      saveUsers(users),
      saveAvailabilities(availabilities)
    ]);
    
    return usersResult && availabilitiesResult;
  } catch (error) {
    console.error('Erreur lors de la sauvegarde des donn√©es:', error);
    return false;
  }
}

module.exports = {
  supabase,
  testConnection,
  getUsers,
  saveUsers,
  getAvailabilities,
  saveAvailabilities,
  getAllData,
  saveAllData
}; 